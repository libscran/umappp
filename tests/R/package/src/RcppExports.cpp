// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// initialize_umap
Rcpp::List initialize_umap(Rcpp::IntegerMatrix indices, Rcpp::NumericMatrix distances, int ndim);
RcppExport SEXP _umappp_initialize_umap(SEXP indicesSEXP, SEXP distancesSEXP, SEXP ndimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_umap(indices, distances, ndim));
    return rcpp_result_gen;
END_RCPP
}
// run_umap
Rcpp::NumericMatrix run_umap(Rcpp::IntegerMatrix indices, Rcpp::NumericMatrix distances, int ndim, double a, double b, int seed, int num_threads, bool parallel_optimization);
RcppExport SEXP _umappp_run_umap(SEXP indicesSEXP, SEXP distancesSEXP, SEXP ndimSEXP, SEXP aSEXP, SEXP bSEXP, SEXP seedSEXP, SEXP num_threadsSEXP, SEXP parallel_optimizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel_optimization(parallel_optimizationSEXP);
    rcpp_result_gen = Rcpp::wrap(run_umap(indices, distances, ndim, a, b, seed, num_threads, parallel_optimization));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_umappp_initialize_umap", (DL_FUNC) &_umappp_initialize_umap, 3},
    {"_umappp_run_umap", (DL_FUNC) &_umappp_run_umap, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_umappp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
